import { __assign, __extends } from "tslib";
import * as _ from '@antv/util';
import * as EventParser from './event';
import ViewLayer from '../../base/view-layer';
import { extractScale } from '../../util/scale';
import { getGeom } from '../../geoms/factory';
var G2_GEOM_MAP = {
    bullet: 'interval',
};
var PLOT_GEOM_MAP = {
    interval: 'bullet',
};
export var STACK_FIELD = '$$type$$';
var BaseBulletLayer = /** @class */ (function (_super) {
    __extends(BaseBulletLayer, _super);
    function BaseBulletLayer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseBulletLayer.getDefaultOptions = function () {
        return _.deepMix({}, _super.getDefaultOptions.call(this), {
            xAxis: {
                visible: false,
                line: {
                    visible: false,
                },
                tickLine: {
                    visible: false,
                },
                label: {
                    visible: false,
                },
            },
            yAxis: {
                visible: false,
            },
            tooltip: {
                visible: false,
                trigger: 'item',
                crosshairs: false,
            },
            bulletStyle: {
                color: '#1890FF',
            },
            barSize: 20,
            barStyle: {
                fillOpacity: 0.2,
            },
            label: {
                visible: true,
                style: {
                    fill: 'rgba(0, 0, 0, 0.45)',
                    stroke: '#fff',
                    lineWidth: 1,
                    textBaseline: 'middle',
                    textAlign: 'left',
                },
            },
            range: [0, 100],
            ticks: {
                visible: false,
                values: ['0', '1', '2', '3', '4', '5'],
                style: {
                    fill: 'rgba(0, 0, 0, 0.25)',
                    textBaseline: 'bottom',
                    textAlign: 'center',
                    fontSize: 12,
                    lineHeight: 16,
                },
            },
            min: 0,
            stackField: STACK_FIELD,
        });
    };
    BaseBulletLayer.prototype.scale = function () {
        var props = this.options;
        var scales = {};
        /** 配置y-scale */
        scales[props.yField] = {};
        if (_.has(props, 'yAxis')) {
            extractScale(scales[props.yField], props.yAxis);
        }
        /** 配置x-scale */
        scales[props.xField] = {
            type: 'cat',
        };
        if (_.has(props, 'xAxis')) {
            extractScale(scales[props.xField], props.xAxis);
        }
        this.setConfig('scales', scales);
        _super.prototype.scale.call(this);
    };
    BaseBulletLayer.prototype.getOptions = function (props) {
        var options = _super.prototype.getOptions.call(this, props);
        this.adjustOptions(options);
        return options;
    };
    BaseBulletLayer.prototype.afterRender = function () {
        _super.prototype.afterRender.call(this);
        this.drawBullets();
    };
    BaseBulletLayer.prototype.drawBullet = function (container, box, value) {
        var options = this.options;
        var bulletColor = options.bulletStyle.color;
        var bulletHeight = options.bulletStyle.size || options.barSize * 0.6;
        if (options.ticks && options.ticks.visible) {
            this.drawBulletTicks(container, box);
        }
        /** 添加当前进度 */
        var rect = container.addShape('rect', {
            attrs: {
                width: box.width * (value / options.max),
                height: bulletHeight,
                x: box.minX,
                y: box.minY + (box.height - bulletHeight) / 2,
                fill: bulletColor,
            },
        });
        rect.name = 'bullet';
        /** 添加目标值 */
        var targetRect = container.addShape('rect', {
            attrs: {
                width: 2,
                height: box.height,
                x: box.minX + box.width * (options.goal / options.max),
                y: box.minY,
                fill: bulletColor,
            },
        });
        targetRect.name = 'target';
        /** 添加目标值 label */
        if (options.label.visible) {
            var labelStyle = options.label.style;
            var label = container.addShape('text', {
                attrs: __assign({ x: rect.getBBox().maxX + 4, y: rect.getBBox().minY + rect.getBBox().height / 2, text: "" + value }, labelStyle),
            });
            label.name = 'label';
        }
    };
    /** 添加 ticks  */
    BaseBulletLayer.prototype.drawBulletTicks = function (container, box) {
        var options = this.options;
        var ticks = options.ticks.values || [];
        var ticksStyle = options.ticks.style;
        var tickInterval = box.width / (ticks.length - 1);
        var tickBottom = _.get(ticksStyle, 'lineHeight', 0) - ticksStyle.fontSize;
        ticks.forEach(function (tick, tickIdx) {
            var x = box.minX + tickInterval * tickIdx;
            var tickText = container.addShape('text', {
                attrs: __assign({ x: x, y: box.minY - tickBottom, text: "" + tick }, ticksStyle),
            });
            tickText.name = 'tick';
            if (tickIdx > 0 && tickIdx !== ticks.length - 1) {
                container.addShape('path', {
                    attrs: {
                        path: [
                            ['M', x, box.minY],
                            ['L', x, box.maxY],
                        ],
                        stroke: '#fff',
                        lineDash: [2, 2],
                        lineWidth: 1,
                    },
                });
            }
        });
    };
    BaseBulletLayer.prototype.geometryParser = function (dim, type) {
        if (dim === 'g2') {
            return G2_GEOM_MAP[type];
        }
        return PLOT_GEOM_MAP[type];
    };
    BaseBulletLayer.prototype.coord = function () {
        var coordConfig = {
            actions: [['transpose']],
        };
        this.setConfig('coord', coordConfig);
    };
    /** 自定义子弹图图例 */
    BaseBulletLayer.prototype.legend = function () {
        var options = this.options;
        var bulletColor = options.bulletStyle.color;
        var items = [
            {
                value: '实际进度',
                marker: {
                    symbol: 'square',
                    fill: bulletColor,
                },
            },
            {
                value: '目标值',
                marker: {
                    symbol: 'line',
                    stroke: bulletColor,
                    lineWidth: 2,
                },
            },
        ];
        if (options.range.length > 2) {
            var colors = options.color || (_.size(options.range) <= 10 ? this.theme.colors : this.theme.colors_20);
            for (var i = 1; i < options.range.length; i += 1) {
                items.push({
                    value: options.range[i - 1] + "-" + options.range[i],
                    marker: {
                        symbol: 'square',
                        fill: colors[i - 1],
                    },
                });
            }
        }
        var legendOptions = __assign(__assign({ custom: true, items: items }, options.legend), { clickable: false });
        this.setConfig('legends', legendOptions);
    };
    BaseBulletLayer.prototype.addGeometry = function () {
        var options = this.options;
        var bullet = getGeom('interval', 'main', {
            positionFields: [options.xField, options.yField],
            plot: this,
        });
        bullet.adjust = [
            {
                type: 'stack',
            },
        ];
        this.bullet = bullet;
        this.setConfig('element', bullet);
    };
    BaseBulletLayer.prototype.parseEvents = function (eventParser) {
        _super.prototype.parseEvents.call(this, EventParser);
    };
    BaseBulletLayer.prototype.adjustOptions = function (options) {
        if (!options.max) {
            options.max = options.goal;
        }
        this.adjustYAxisOptions(options);
        this.adjustDataOptions(options);
    };
    return BaseBulletLayer;
}(ViewLayer));
export default BaseBulletLayer;
//# sourceMappingURL=base-layer.js.map